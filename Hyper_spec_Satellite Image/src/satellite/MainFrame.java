/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package satellite;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import org.apache.commons.math3.ml.distance.EuclideanDistance;

/**
 *
 * @author admin
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    Details dt=new Details();
    
    static int       inputVectorSize; 
    static int     imageSize = 32;
    static ArrayList category=new ArrayList();
    
    ImageSet trainset = new ImageSet();
    
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 30)); // NOI18N
        jLabel1.setText("Unsupervised Learning on Satellite Images");

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 0, 51), 2, true));

        jButton1.setFont(new java.awt.Font("Andalus", 0, 16)); // NOI18N
        jButton1.setText("Train Images");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Andalus", 0, 16)); // NOI18N
        jButton2.setText("Query Image");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(jButton1)
                .addGap(117, 117, 117)
                .addComponent(jButton2)
                .addContainerGap(240, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jButton3.setFont(new java.awt.Font("Andalus", 0, 17)); // NOI18N
        jButton3.setText("Neighbor Image");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(196, 196, 196)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(289, 289, 289)
                        .addComponent(jButton3)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            File trainDir = new File(dt.trainPath);
            
            
            ArrayList category=new ArrayList();
            for(int i=0;i<dt.cate.length;i++)
                category.add(dt.cate[i]);
            
            loadDataset(trainset, trainDir);
            
             ImageInstance sampleImage = trainset.getImages().get(0); // Assume there is at least one train image!
            inputVectorSize = sampleImage.getWidth() * sampleImage.getHeight() *1;// + 1; // gray
            //inputVectorSize = sampleImage.getWidth() * sampleImage.getHeight() *4;// + 1; // colr
            
            Vector<Vector<Double>> trainFeatureVectors = new Vector<Vector<Double>>(trainset.getSize());
            Vector<Vector<Double>> feat1=fillFeatureVectors(trainFeatureVectors, trainset);
            dt.trFeat=feat1;
            
           /* for(int i=0;i<trainFeatureVectors.size();i++)
            {
                Vector v=trainFeatureVectors.get(i);
                System.out.println(i+" : "+v.size());
            }
        */            
            int countActivationMapsConv = 20;
            int kernelSizeConv          = 5;
            int countClasses            = category.size(); 
            int padding                 = 0;
            int stride                  = 1;


            int hyperparameters         = ( (padding <<28)|(countClasses<<24) |(stride <<16) | (kernelSizeConv << 8) | countActivationMapsConv )  ;
            

             ConvNet CNN = new ConvNet(feat1 , hyperparameters, false);
             
             CNN.trainCNN(feat1);
             
             jButton2.setEnabled(true);
             
             
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
            JFileChooser fc = new JFileChooser();
            fc.setCurrentDirectory(new File("."));
            fc.setFileFilter(new FileFilter()
                {
                    public boolean accept(File f)
                    {
                        String name=f.getName().toLowerCase();
                        return name.endsWith(".jpg") || f.isDirectory();
                    }

                    public String getDescription()
                    {
                        return   "Query Image ";
                    }
                });
                int ch=fc.showOpenDialog(this);
                if(ch==JFileChooser.APPROVE_OPTION)
                {
                    String path=fc.getSelectedFile().getAbsolutePath();
                    
                    dt.qryPath=path;
                    ImageIcon ic=new ImageIcon(path);

                    jLabel2.setIcon(ic);

                }
            
            jButton3.setEnabled(true);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try
        {
            BufferedImage img = ImageIO.read(new File(dt.qryPath));
            BufferedImage scaledBI1=null;
            if (imageSize != 128) 
            {
                scaledBI1 = new BufferedImage(imageSize, imageSize, BufferedImage.TYPE_INT_RGB);
                Graphics2D g = scaledBI1.createGraphics();
                g.drawImage(img, 0, 0, imageSize, imageSize, null);
                g.dispose();
            }

            ImageInstance instance = new ImageInstance(scaledBI1 == null ? img : scaledBI1, "-","-");
            
            Vector<Double> ff=convertToFeatureVector(instance);
            
            double qryft[]=new double[ff.size()];
            for(int i=0;i<ff.size();i++)
                qryft[i]=ff.get(i);
            
            double trft[][]=new double[dt.trFeat.size()][qryft.length];
            
            for(int i=0;i<dt.trFeat.size();i++)
            {
                Vector<Double> v1=dt.trFeat.get(i);
                for(int j=0;j<v1.size();j++)
                {
                    trft[i][j]=v1.get(j);
                }
            }
            
            EuclideanDistance ed=new EuclideanDistance();
            String dis[][]=new String[trft.length][2];
            
            for(int i=0;i<trft.length;i++)
            {
                double dis1=ed.compute(trft[i], qryft);                
                dis[i][0]=trainset.getImages().get(i).getName();
                dis[i][1]=String.valueOf(dis1);
            }

            for(int i1=0;i1<dis.length;i1++)
            {
                for(int j1=0;j1<dis.length;j1++)
                {
                    if(Double.parseDouble(dis[i1][1])<Double.parseDouble(dis[j1][1]))
                    {
                        String t1=dis[i1][0];
                        dis[i1][0]=dis[j1][0];
                        dis[j1][0]=t1;
                        
                        String t2=dis[i1][1];
                        dis[i1][1]=dis[j1][1];
                        dis[j1][1]=t2;
                    }
                }
            }   
            
            for(int i=0;i<5;i++)
            {
                System.out.println(dis[i][0]+"  :  "+dis[i][1]);
            }
            
            ResultFrame rf=new ResultFrame();
            rf.setVisible(true);
            rf.setTitle("Result");
            rf.setResizable(false);
            
            rf.jLabel2.setIcon(new ImageIcon(dt.trainPath+"//"+dis[0][0]));
            rf.jLabel3.setIcon(new ImageIcon(dt.trainPath+"//"+dis[1][0]));
            rf.jLabel4.setIcon(new ImageIcon(dt.trainPath+"//"+dis[2][0]));
            rf.jLabel5.setIcon(new ImageIcon(dt.trainPath+"//"+dis[3][0]));
            rf.jLabel6.setIcon(new ImageIcon(dt.trainPath+"//"+dis[4][0]));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public static void loadDataset(ImageSet dataset, File dir) 
    {
        for(File file : dir.listFiles()) 
        {
        
            if(!file.isFile() || !file.getName().endsWith(".jpg")) 
            {
                continue;
            }
            
            BufferedImage img = null, scaledBI = null;
            try 
            {
            
                img = ImageIO.read(file);
               
                String name = file.getName();
                int locationOfUnderscoreImage = name.indexOf("_");

                
                if (imageSize != 128) 
                {
                    scaledBI = new BufferedImage(imageSize, imageSize, BufferedImage.TYPE_INT_RGB);
                    Graphics2D g = scaledBI.createGraphics();
                    g.drawImage(img, 0, 0, imageSize, imageSize, null);
                    g.dispose();
                }

                ImageInstance instance = new ImageInstance(scaledBI == null ? img : scaledBI, name.substring(0, locationOfUnderscoreImage),name);

                dataset.add(instance);
            } 
            catch (IOException e) 
            {
                e.printStackTrace();
                System.exit(1);
            }
        }
    }
    
    private static Vector<Vector<Double>> fillFeatureVectors(Vector<Vector<Double>> featureVectors, ImageSet dataset) 
    {
       
        
        for (ImageInstance image : dataset.getImages()) 
        {
            featureVectors.addElement(convertToFeatureVector(image));
        }
        return featureVectors;
    }

    private static Vector<Double> convertToFeatureVector(ImageInstance image)     
    {
        
        
        Vector<Double> result = new Vector<Double>(inputVectorSize);

        int unitsPerPixel=4;
        for (int index = 0; index < inputVectorSize - 1; index++) { // Need to subtract 1 since the last item is the CATEGORY.
          
            
                int xValue = index % image.getWidth();
                int yValue = index / image.getWidth();
                result.add(image.getGrayImage()   [xValue][yValue] / 255.0);
            
        }
      //  result.add((double)category.indexOf(image.getLabel()));
      
        System.out.println(result);
        return result;
    }
    
    public void trainDeep()
    {
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
